---
title: "Applying supervised machine mearning to landuse cover in Santa Barbara, CA"
title-block-banner: true
description: "Building algorithms with machine learning to understand how we use our land"
author: 
  - name: Maxwell Pepperdine
    url: https://maxpepperdine.github.io
    affiliation: MESM
    affiliation_url: https://bren.ucsb.edu/masters-programs/master-environmental-science-and-management 
date: 2024-11-20
categories: [Machine-learning, Remote-sensing, RStudio, Quarto, MESM]
toc: true
image: lu_classification.jpeg
citation: 
  url: https://maxpepperdine.github.io/posts/2024-11-15-ml-landuse/
execute:
  eval: true
  warning: false
  message: false
code-fold: true
draft: true
---

## Overview

This analysis is from an assignment in EDS 223 (Geospatial Analysis & Remote Sensing).

## Install new packages

```{r}
# install.packages("rpart")
# install.packages("rpart.plot")
```

## Load packages

```{r}
library(sf) # vector data
library(terra) # raster data
library(here) # file path management
library(tidyverse)
library(rpart) # recursive partitioning and regression trees
library(rpart.plot) # plotting for rpart
library(tmap) # map making
```

## Load data

#### Landsat

```{r}
#| label: fig-landsat
#| fig-cap: "Full extent of the Landsat scene shown in true color."

# list files for each band, including the full file path
filelist <- list.files(here::here("posts/2024-11-15-ml-landuse/data/landsat-data"), 
                       full.names = TRUE)

# read in and store as a raster stack
landsat <- rast(filelist)

# update layer names to match band
names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")

# plot true color image
plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
```

#### Study area

```{r, echo = TRUE, output = FALSE}
# read in shapefile for southern portion of SB county
# this is our study area which we'll perform classification in
sb_county_south <- st_read(here::here("posts/2024-11-15-ml-landuse/data/SB_county_south.shp")) %>% 
  st_transform(., crs = crs(landsat))

# plot the study area
tm_shape(sb_county_south) + 
  tm_borders()
```

## Prepare data

#### Crop & mask Landsat scene to study area

```{r}
#| label: fig-true
#| fig-cap: "True color image of the Landsat scene cropped to the southern portion of Santa Barbara County."

# crop Landsat scene to the extent of the SB county shapefile
landsat_cropped <- terra::crop(landsat, sb_county_south)

# mask the raster to southern portion of SB county
landsat_masked <- terra::mask(landsat_cropped, sb_county_south)

# remove unnecessary object from environment
rm(landsat, Sb_county_south, landsat_cropped)

plotRGB(landsat_masked, r = 3, g = 2, b = 1, stretch = "lin")
```

#### Convert Landsat values to reflectance

```{r, echo = TRUE, output = FALSE}
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
                 43636, Inf, NA), ncol = 3, byrow = TRUE)

landsat <- terra::classify(landsat_masked, rcl = rcl)

# adjust values based on scaling and additive factor
landsat <- (landsat * 0.0000275 - 0.2) * 100

# check values are 0 - 100
summary(landsat)
```

## Training classifier

#### Load training data

```{r, echo = TRUE, output = FALSE}
# read in and transform training data
training_data <- st_read(here::here( "posts/2024-11-15-ml-landuse/data/trainingdata.shp")) %>%
  st_transform(., crs = crs(landsat))
```

#### Extract reflectance values

```{r}
# extract reflectance values at training sites
training_data_values <- terra::extract(landsat, training_data, df = TRUE)

# convert training data to data frame
training_data_attributes <- training_data %>%
  st_drop_geometry()

# join training data attributes and extracted reflectance values
SB_training_data <- left_join(training_data_values, training_data_attributes,
                              by = c("ID" = "id")) %>%
                    mutate(type = as.factor(type)) # convert landcover type to factor
```

#### Train the classifier

```{r}
#| label: fig-decision-tree
#| fig-cap: "Decision tree for classifying landcover types in Santa Barbara County."

# establish model formula
# we're predicting landcover type based on reflectance values of these bands
SB_formula <- type ~ red + green + blue + NIR + SWIR1 + SWIR2

# train decision tree
SB_decision_tree <- rpart(formula = SB_formula,
                          data = SB_training_data,
                          method = "class", # for performing a classification
                          na.action = na.omit)

# plot decision tree
prp(SB_decision_tree)
```

## Apply classifier to classify the Landsat scene

```{r, echo = TRUE, output = FALSE}
# classify image based on decision tree
SB_classification <- terra::predict(landsat, 
                                    SB_decision_tree, 
                                    type = "class", 
                                    na.rm = TRUE)

# inspect level to understand the order of classes in prediction
levels(SB_training_data$type)
levels(SB_classification)
```

## Make a map!

```{r}
#| label: fig-classification
#| fig-cap: "Landcover classification of the southern portion of Santa Barbara County."

# plot results
tm_shape(SB_classification) +
  tm_raster(palette = c("#8DB580", "#F2DDA4", 
                        "#7E8987", "#6A8EAE"), 
            labels = c("green vegetation", "soil/dead grass", 
                       "urban", "water"), 
            title = "Landcover type") +
  tm_layout(legend.outside = TRUE,
            main.title = "Santa Barbara Landcover")
```
